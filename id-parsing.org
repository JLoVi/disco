* An IOBox is exposed
** Parent has no UUID
*** IOBox has no UUID 
    This is the base case for completely new VVVV code.
    
    - Create new UUID for parent and patch the graph
    - Create new UUID for node and patch the graph
    - Synthesize an UUID from the node's UUID combined with its groups
      UUID and the pin name
    - Add new PinGroup containing parsed pins to global state

*** IOBox has UUID
    This happens when a VVVV module is instantiated.

    - Create new UUID for parent and patch the graph
    - Keep the UUID found on node
    - Synthesize a UUID from the node's UUID combined with its groups
      UUID and the pin name
    - Add new PinGroup containing parsed pins to global state
     
** Parent has UUID
*** IOBox has no UUID 
    When a new IOBox is added to a patch that already has an UUID 

    - Create new UUID for node and patch the graph
    - Synthesize an UUID from the node's UUID combined with its groups
      UUID and the pin name
    - Add the parsed pins to the PinGroup in the global state

*** IOBox has UUID
    This happens in the following scenarios:

    - an IOBox was copied and pasted
    - an IOBox was cut and pasted
    - a module was instantiated

* An IOBox is updated (re-configured)
* An IOBox is un-exposed
* WHAT ABOUT
  - VVVV modules that contain other modules which already have UUID?
    when the top-level module gets instantiated, the tags will stay
    the same, resulting in collisions 
