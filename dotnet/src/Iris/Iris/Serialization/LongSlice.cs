// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization
{

using System;
using FlatBuffers;

public sealed class LongSlice : Table {
  public static LongSlice GetRootAsLongSlice(ByteBuffer _bb) { return GetRootAsLongSlice(_bb, new LongSlice()); }
  public static LongSlice GetRootAsLongSlice(ByteBuffer _bb, LongSlice obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public LongSlice __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte Index { get { int o = __offset(4); return o != 0 ? bb.Get(o + bb_pos) : (byte)0; } }
  public long Value { get { int o = __offset(6); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }

  public static Offset<LongSlice> CreateLongSlice(FlatBufferBuilder builder,
      byte Index = 0,
      long Value = 0) {
    builder.StartObject(2);
    LongSlice.AddValue(builder, Value);
    LongSlice.AddIndex(builder, Index);
    return LongSlice.EndLongSlice(builder);
  }

  public static void StartLongSlice(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIndex(FlatBufferBuilder builder, byte Index) { builder.AddByte(0, Index, 0); }
  public static void AddValue(FlatBufferBuilder builder, long Value) { builder.AddLong(1, Value, 0); }
  public static Offset<LongSlice> EndLongSlice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LongSlice>(o);
  }
};


}
