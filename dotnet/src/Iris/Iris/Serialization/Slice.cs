// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization
{

using System;
using FlatBuffers;

public sealed class Slice : Table {
  public static Slice GetRootAsSlice(ByteBuffer _bb) { return GetRootAsSlice(_bb, new Slice()); }
  public static Slice GetRootAsSlice(ByteBuffer _bb, Slice obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Slice __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public SliceType ValueType { get { int o = __offset(4); return o != 0 ? (SliceType)bb.Get(o + bb_pos) : SliceType.NONE; } }
  public TTable GetValue<TTable>(TTable obj) where TTable : Table { int o = __offset(6); return o != 0 ? __union(obj, o) : null; }

  public static Offset<Slice> CreateSlice(FlatBufferBuilder builder,
      SliceType Value_type = SliceType.NONE,
      int ValueOffset = 0) {
    builder.StartObject(2);
    Slice.AddValue(builder, ValueOffset);
    Slice.AddValueType(builder, Value_type);
    return Slice.EndSlice(builder);
  }

  public static void StartSlice(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValueType(FlatBufferBuilder builder, SliceType ValueType) { builder.AddByte(0, (byte)ValueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int ValueOffset) { builder.AddOffset(1, ValueOffset, 0); }
  public static Offset<Slice> EndSlice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Slice>(o);
  }
  public static void FinishSliceBuffer(FlatBufferBuilder builder, Offset<Slice> offset) { builder.Finish(offset.Value); }
};


}
