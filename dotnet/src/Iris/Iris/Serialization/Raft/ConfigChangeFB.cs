// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class ConfigChangeFB : Table {
  public static ConfigChangeFB GetRootAsConfigChangeFB(ByteBuffer _bb) { return GetRootAsConfigChangeFB(_bb, new ConfigChangeFB()); }
  public static ConfigChangeFB GetRootAsConfigChangeFB(ByteBuffer _bb, ConfigChangeFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ConfigChangeFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public ConfigChangeTypeFB Type { get { int o = __offset(4); return o != 0 ? (ConfigChangeTypeFB)bb.GetUshort(o + bb_pos) : ConfigChangeTypeFB.NodeAdded; } }
  public NodeFB Node { get { return GetNode(new NodeFB()); } }
  public NodeFB GetNode(NodeFB obj) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<ConfigChangeFB> CreateConfigChangeFB(FlatBufferBuilder builder,
      ConfigChangeTypeFB Type = ConfigChangeTypeFB.NodeAdded,
      Offset<NodeFB> NodeOffset = default(Offset<NodeFB>)) {
    builder.StartObject(2);
    ConfigChangeFB.AddNode(builder, NodeOffset);
    ConfigChangeFB.AddType(builder, Type);
    return ConfigChangeFB.EndConfigChangeFB(builder);
  }

  public static void StartConfigChangeFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, ConfigChangeTypeFB Type) { builder.AddUshort(0, (ushort)Type, 0); }
  public static void AddNode(FlatBufferBuilder builder, Offset<NodeFB> NodeOffset) { builder.AddOffset(1, NodeOffset.Value, 0); }
  public static Offset<ConfigChangeFB> EndConfigChangeFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ConfigChangeFB>(o);
  }
};


}
