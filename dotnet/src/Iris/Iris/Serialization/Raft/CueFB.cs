// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class CueFB : Table {
  public static CueFB GetRootAsCueFB(ByteBuffer _bb) { return GetRootAsCueFB(_bb, new CueFB()); }
  public static CueFB GetRootAsCueFB(ByteBuffer _bb, CueFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public CueFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Id { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetIdBytes() { return __vector_as_arraysegment(4); }
  public string Name { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(6); }
  public IOBoxFB GetIOBoxes(int j) { return GetIOBoxes(new IOBoxFB(), j); }
  public IOBoxFB GetIOBoxes(IOBoxFB obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int IOBoxesLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<CueFB> CreateCueFB(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      VectorOffset IOBoxesOffset = default(VectorOffset)) {
    builder.StartObject(3);
    CueFB.AddIOBoxes(builder, IOBoxesOffset);
    CueFB.AddName(builder, NameOffset);
    CueFB.AddId(builder, IdOffset);
    return CueFB.EndCueFB(builder);
  }

  public static void StartCueFB(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(0, IdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIOBoxes(FlatBufferBuilder builder, VectorOffset IOBoxesOffset) { builder.AddOffset(2, IOBoxesOffset.Value, 0); }
  public static VectorOffset CreateIOBoxesVector(FlatBufferBuilder builder, Offset<IOBoxFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartIOBoxesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CueFB> EndCueFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CueFB>(o);
  }
};


}
