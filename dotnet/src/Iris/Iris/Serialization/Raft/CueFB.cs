// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class CueFB : Table {
  public static CueFB GetRootAsCueFB(ByteBuffer _bb) { return GetRootAsCueFB(_bb, new CueFB()); }
  public static CueFB GetRootAsCueFB(ByteBuffer _bb, CueFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public CueFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string CueId { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetCueIdBytes() { return __vector_as_arraysegment(4); }
  public string CueName { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetCueNameBytes() { return __vector_as_arraysegment(6); }

  public static Offset<CueFB> CreateCueFB(FlatBufferBuilder builder,
      StringOffset CueIdOffset = default(StringOffset),
      StringOffset CueNameOffset = default(StringOffset)) {
    builder.StartObject(2);
    CueFB.AddCueName(builder, CueNameOffset);
    CueFB.AddCueId(builder, CueIdOffset);
    return CueFB.EndCueFB(builder);
  }

  public static void StartCueFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddCueId(FlatBufferBuilder builder, StringOffset CueIdOffset) { builder.AddOffset(0, CueIdOffset.Value, 0); }
  public static void AddCueName(FlatBufferBuilder builder, StringOffset CueNameOffset) { builder.AddOffset(1, CueNameOffset.Value, 0); }
  public static Offset<CueFB> EndCueFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CueFB>(o);
  }
};


}
