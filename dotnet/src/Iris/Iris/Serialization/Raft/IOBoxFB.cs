// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public struct IOBoxFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static IOBoxFB GetRootAsIOBoxFB(ByteBuffer _bb) { return GetRootAsIOBoxFB(_bb, new IOBoxFB()); }
  public static IOBoxFB GetRootAsIOBoxFB(ByteBuffer _bb, IOBoxFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public IOBoxFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public IOBoxTypeFB IOBoxType { get { int o = __p.__offset(4); return o != 0 ? (IOBoxTypeFB)__p.bb.Get(o + __p.bb_pos) : IOBoxTypeFB.NONE; } }
  public TTable? IOBox<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<IOBoxFB> CreateIOBoxFB(FlatBufferBuilder builder,
      IOBoxTypeFB IOBox_type = IOBoxTypeFB.NONE,
      int IOBoxOffset = 0) {
    builder.StartObject(2);
    IOBoxFB.AddIOBox(builder, IOBoxOffset);
    IOBoxFB.AddIOBoxType(builder, IOBox_type);
    return IOBoxFB.EndIOBoxFB(builder);
  }

  public static void StartIOBoxFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIOBoxType(FlatBufferBuilder builder, IOBoxTypeFB IOBoxType) { builder.AddByte(0, (byte)IOBoxType, 0); }
  public static void AddIOBox(FlatBufferBuilder builder, int IOBoxOffset) { builder.AddOffset(1, IOBoxOffset, 0); }
  public static Offset<IOBoxFB> EndIOBoxFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<IOBoxFB>(o);
  }
};


}
