// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public struct SliceFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SliceFB GetRootAsSliceFB(ByteBuffer _bb) { return GetRootAsSliceFB(_bb, new SliceFB()); }
  public static SliceFB GetRootAsSliceFB(ByteBuffer _bb, SliceFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SliceFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SliceTypeFB SliceType { get { int o = __p.__offset(4); return o != 0 ? (SliceTypeFB)__p.bb.Get(o + __p.bb_pos) : SliceTypeFB.NONE; } }
  public TTable? Slice<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<SliceFB> CreateSliceFB(FlatBufferBuilder builder,
      SliceTypeFB Slice_type = SliceTypeFB.NONE,
      int SliceOffset = 0) {
    builder.StartObject(2);
    SliceFB.AddSlice(builder, SliceOffset);
    SliceFB.AddSliceType(builder, Slice_type);
    return SliceFB.EndSliceFB(builder);
  }

  public static void StartSliceFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSliceType(FlatBufferBuilder builder, SliceTypeFB SliceType) { builder.AddByte(0, (byte)SliceType, 0); }
  public static void AddSlice(FlatBufferBuilder builder, int SliceOffset) { builder.AddOffset(1, SliceOffset, 0); }
  public static Offset<SliceFB> EndSliceFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SliceFB>(o);
  }
};


}
