// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public struct RGBAValueFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RGBAValueFB GetRootAsRGBAValueFB(ByteBuffer _bb) { return GetRootAsRGBAValueFB(_bb, new RGBAValueFB()); }
  public static RGBAValueFB GetRootAsRGBAValueFB(ByteBuffer _bb, RGBAValueFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RGBAValueFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Red { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Green { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Blue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Alpha { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<RGBAValueFB> CreateRGBAValueFB(FlatBufferBuilder builder,
      byte Red = 0,
      byte Green = 0,
      byte Blue = 0,
      byte Alpha = 0) {
    builder.StartObject(4);
    RGBAValueFB.AddAlpha(builder, Alpha);
    RGBAValueFB.AddBlue(builder, Blue);
    RGBAValueFB.AddGreen(builder, Green);
    RGBAValueFB.AddRed(builder, Red);
    return RGBAValueFB.EndRGBAValueFB(builder);
  }

  public static void StartRGBAValueFB(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddRed(FlatBufferBuilder builder, byte Red) { builder.AddByte(0, Red, 0); }
  public static void AddGreen(FlatBufferBuilder builder, byte Green) { builder.AddByte(1, Green, 0); }
  public static void AddBlue(FlatBufferBuilder builder, byte Blue) { builder.AddByte(2, Blue, 0); }
  public static void AddAlpha(FlatBufferBuilder builder, byte Alpha) { builder.AddByte(3, Alpha, 0); }
  public static Offset<RGBAValueFB> EndRGBAValueFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RGBAValueFB>(o);
  }
};


}
