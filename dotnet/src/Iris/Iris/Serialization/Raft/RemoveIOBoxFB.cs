// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class RemoveIOBoxFB : Table {
  public static RemoveIOBoxFB GetRootAsRemoveIOBoxFB(ByteBuffer _bb) { return GetRootAsRemoveIOBoxFB(_bb, new RemoveIOBoxFB()); }
  public static RemoveIOBoxFB GetRootAsRemoveIOBoxFB(ByteBuffer _bb, RemoveIOBoxFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public RemoveIOBoxFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public IOBoxFB IOBox { get { return GetIOBox(new IOBoxFB()); } }
  public IOBoxFB GetIOBox(IOBoxFB obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<RemoveIOBoxFB> CreateRemoveIOBoxFB(FlatBufferBuilder builder,
      Offset<IOBoxFB> IOBoxOffset = default(Offset<IOBoxFB>)) {
    builder.StartObject(1);
    RemoveIOBoxFB.AddIOBox(builder, IOBoxOffset);
    return RemoveIOBoxFB.EndRemoveIOBoxFB(builder);
  }

  public static void StartRemoveIOBoxFB(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIOBox(FlatBufferBuilder builder, Offset<IOBoxFB> IOBoxOffset) { builder.AddOffset(0, IOBoxOffset.Value, 0); }
  public static Offset<RemoveIOBoxFB> EndRemoveIOBoxFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RemoveIOBoxFB>(o);
  }
};


}
