// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public struct LogFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogFB GetRootAsLogFB(ByteBuffer _bb) { return GetRootAsLogFB(_bb, new LogFB()); }
  public static LogFB GetRootAsLogFB(ByteBuffer _bb, LogFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LogTypeFB EntryType { get { int o = __p.__offset(4); return o != 0 ? (LogTypeFB)__p.bb.Get(o + __p.bb_pos) : LogTypeFB.NONE; } }
  public TTable? Entry<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<LogFB> CreateLogFB(FlatBufferBuilder builder,
      LogTypeFB Entry_type = LogTypeFB.NONE,
      int EntryOffset = 0) {
    builder.StartObject(2);
    LogFB.AddEntry(builder, EntryOffset);
    LogFB.AddEntryType(builder, Entry_type);
    return LogFB.EndLogFB(builder);
  }

  public static void StartLogFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddEntryType(FlatBufferBuilder builder, LogTypeFB EntryType) { builder.AddByte(0, (byte)EntryType, 0); }
  public static void AddEntry(FlatBufferBuilder builder, int EntryOffset) { builder.AddOffset(1, EntryOffset, 0); }
  public static Offset<LogFB> EndLogFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogFB>(o);
  }
};


}
