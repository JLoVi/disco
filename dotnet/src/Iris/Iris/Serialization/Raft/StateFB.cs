// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public struct StateFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StateFB GetRootAsStateFB(ByteBuffer _bb) { return GetRootAsStateFB(_bb, new StateFB()); }
  public static StateFB GetRootAsStateFB(ByteBuffer _bb, StateFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public StateFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PatchFB? Patches(int j) { int o = __p.__offset(4); return o != 0 ? (PatchFB?)(new PatchFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PatchesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public IOBoxFB? IOBoxes(int j) { int o = __p.__offset(6); return o != 0 ? (IOBoxFB?)(new IOBoxFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int IOBoxesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CueFB? Cues(int j) { int o = __p.__offset(8); return o != 0 ? (CueFB?)(new CueFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CuesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CueListFB? CueLists(int j) { int o = __p.__offset(10); return o != 0 ? (CueListFB?)(new CueListFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CueListsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public NodeFB? Nodes(int j) { int o = __p.__offset(12); return o != 0 ? (NodeFB?)(new NodeFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NodesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SessionFB? Sessions(int j) { int o = __p.__offset(14); return o != 0 ? (SessionFB?)(new SessionFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SessionsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public UserFB? Users(int j) { int o = __p.__offset(16); return o != 0 ? (UserFB?)(new UserFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UsersLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<StateFB> CreateStateFB(FlatBufferBuilder builder,
      VectorOffset PatchesOffset = default(VectorOffset),
      VectorOffset IOBoxesOffset = default(VectorOffset),
      VectorOffset CuesOffset = default(VectorOffset),
      VectorOffset CueListsOffset = default(VectorOffset),
      VectorOffset NodesOffset = default(VectorOffset),
      VectorOffset SessionsOffset = default(VectorOffset),
      VectorOffset UsersOffset = default(VectorOffset)) {
    builder.StartObject(7);
    StateFB.AddUsers(builder, UsersOffset);
    StateFB.AddSessions(builder, SessionsOffset);
    StateFB.AddNodes(builder, NodesOffset);
    StateFB.AddCueLists(builder, CueListsOffset);
    StateFB.AddCues(builder, CuesOffset);
    StateFB.AddIOBoxes(builder, IOBoxesOffset);
    StateFB.AddPatches(builder, PatchesOffset);
    return StateFB.EndStateFB(builder);
  }

  public static void StartStateFB(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddPatches(FlatBufferBuilder builder, VectorOffset PatchesOffset) { builder.AddOffset(0, PatchesOffset.Value, 0); }
  public static VectorOffset CreatePatchesVector(FlatBufferBuilder builder, Offset<PatchFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPatchesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIOBoxes(FlatBufferBuilder builder, VectorOffset IOBoxesOffset) { builder.AddOffset(1, IOBoxesOffset.Value, 0); }
  public static VectorOffset CreateIOBoxesVector(FlatBufferBuilder builder, Offset<IOBoxFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartIOBoxesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCues(FlatBufferBuilder builder, VectorOffset CuesOffset) { builder.AddOffset(2, CuesOffset.Value, 0); }
  public static VectorOffset CreateCuesVector(FlatBufferBuilder builder, Offset<CueFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCueLists(FlatBufferBuilder builder, VectorOffset CueListsOffset) { builder.AddOffset(3, CueListsOffset.Value, 0); }
  public static VectorOffset CreateCueListsVector(FlatBufferBuilder builder, Offset<CueListFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCueListsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNodes(FlatBufferBuilder builder, VectorOffset NodesOffset) { builder.AddOffset(4, NodesOffset.Value, 0); }
  public static VectorOffset CreateNodesVector(FlatBufferBuilder builder, Offset<NodeFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSessions(FlatBufferBuilder builder, VectorOffset SessionsOffset) { builder.AddOffset(5, SessionsOffset.Value, 0); }
  public static VectorOffset CreateSessionsVector(FlatBufferBuilder builder, Offset<SessionFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSessionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUsers(FlatBufferBuilder builder, VectorOffset UsersOffset) { builder.AddOffset(6, UsersOffset.Value, 0); }
  public static VectorOffset CreateUsersVector(FlatBufferBuilder builder, Offset<UserFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUsersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<StateFB> EndStateFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<StateFB>(o);
  }
};


}
