// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class AddPatchFB : Table {
  public static AddPatchFB GetRootAsAddPatchFB(ByteBuffer _bb) { return GetRootAsAddPatchFB(_bb, new AddPatchFB()); }
  public static AddPatchFB GetRootAsAddPatchFB(ByteBuffer _bb, AddPatchFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public AddPatchFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public PatchFB Patch { get { return GetPatch(new PatchFB()); } }
  public PatchFB GetPatch(PatchFB obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<AddPatchFB> CreateAddPatchFB(FlatBufferBuilder builder,
      Offset<PatchFB> PatchOffset = default(Offset<PatchFB>)) {
    builder.StartObject(1);
    AddPatchFB.AddPatch(builder, PatchOffset);
    return AddPatchFB.EndAddPatchFB(builder);
  }

  public static void StartAddPatchFB(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPatch(FlatBufferBuilder builder, Offset<PatchFB> PatchOffset) { builder.AddOffset(0, PatchOffset.Value, 0); }
  public static Offset<AddPatchFB> EndAddPatchFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AddPatchFB>(o);
  }
};


}
