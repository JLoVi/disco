// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public struct ColorSpaceFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ColorSpaceFB GetRootAsColorSpaceFB(ByteBuffer _bb) { return GetRootAsColorSpaceFB(_bb, new ColorSpaceFB()); }
  public static ColorSpaceFB GetRootAsColorSpaceFB(ByteBuffer _bb, ColorSpaceFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ColorSpaceFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ColorSpaceTypeFB ValueType { get { int o = __p.__offset(4); return o != 0 ? (ColorSpaceTypeFB)__p.bb.Get(o + __p.bb_pos) : ColorSpaceTypeFB.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<ColorSpaceFB> CreateColorSpaceFB(FlatBufferBuilder builder,
      ColorSpaceTypeFB Value_type = ColorSpaceTypeFB.NONE,
      int ValueOffset = 0) {
    builder.StartObject(2);
    ColorSpaceFB.AddValue(builder, ValueOffset);
    ColorSpaceFB.AddValueType(builder, Value_type);
    return ColorSpaceFB.EndColorSpaceFB(builder);
  }

  public static void StartColorSpaceFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValueType(FlatBufferBuilder builder, ColorSpaceTypeFB ValueType) { builder.AddByte(0, (byte)ValueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int ValueOffset) { builder.AddOffset(1, ValueOffset, 0); }
  public static Offset<ColorSpaceFB> EndColorSpaceFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ColorSpaceFB>(o);
  }
};


}
