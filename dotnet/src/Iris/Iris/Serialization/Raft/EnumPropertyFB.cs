// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class EnumPropertyFB : Table {
  public static EnumPropertyFB GetRootAsEnumPropertyFB(ByteBuffer _bb) { return GetRootAsEnumPropertyFB(_bb, new EnumPropertyFB()); }
  public static EnumPropertyFB GetRootAsEnumPropertyFB(ByteBuffer _bb, EnumPropertyFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public EnumPropertyFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Key { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetKeyBytes() { return __vector_as_arraysegment(4); }
  public string Value { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetValueBytes() { return __vector_as_arraysegment(6); }

  public static Offset<EnumPropertyFB> CreateEnumPropertyFB(FlatBufferBuilder builder,
      StringOffset KeyOffset = default(StringOffset),
      StringOffset ValueOffset = default(StringOffset)) {
    builder.StartObject(2);
    EnumPropertyFB.AddValue(builder, ValueOffset);
    EnumPropertyFB.AddKey(builder, KeyOffset);
    return EnumPropertyFB.EndEnumPropertyFB(builder);
  }

  public static void StartEnumPropertyFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset KeyOffset) { builder.AddOffset(0, KeyOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset ValueOffset) { builder.AddOffset(1, ValueOffset.Value, 0); }
  public static Offset<EnumPropertyFB> EndEnumPropertyFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EnumPropertyFB>(o);
  }
};


}
