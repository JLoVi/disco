// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class EnumBoxFB : Table {
  public static EnumBoxFB GetRootAsEnumBoxFB(ByteBuffer _bb) { return GetRootAsEnumBoxFB(_bb, new EnumBoxFB()); }
  public static EnumBoxFB GetRootAsEnumBoxFB(ByteBuffer _bb, EnumBoxFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public EnumBoxFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Id { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetIdBytes() { return __vector_as_arraysegment(4); }
  public string Name { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(6); }
  public string Patch { get { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetPatchBytes() { return __vector_as_arraysegment(8); }
  public string GetTags(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }
  public EnumPropertyFB GetProperties(int j) { return GetProperties(new EnumPropertyFB(), j); }
  public EnumPropertyFB GetProperties(EnumPropertyFB obj, int j) { int o = __offset(12); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int PropertiesLength { get { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; } }
  public EnumSliceFB GetSlices(int j) { return GetSlices(new EnumSliceFB(), j); }
  public EnumSliceFB GetSlices(EnumSliceFB obj, int j) { int o = __offset(14); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int SlicesLength { get { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<EnumBoxFB> CreateEnumBoxFB(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      StringOffset PatchOffset = default(StringOffset),
      VectorOffset TagsOffset = default(VectorOffset),
      VectorOffset PropertiesOffset = default(VectorOffset),
      VectorOffset SlicesOffset = default(VectorOffset)) {
    builder.StartObject(6);
    EnumBoxFB.AddSlices(builder, SlicesOffset);
    EnumBoxFB.AddProperties(builder, PropertiesOffset);
    EnumBoxFB.AddTags(builder, TagsOffset);
    EnumBoxFB.AddPatch(builder, PatchOffset);
    EnumBoxFB.AddName(builder, NameOffset);
    EnumBoxFB.AddId(builder, IdOffset);
    return EnumBoxFB.EndEnumBoxFB(builder);
  }

  public static void StartEnumBoxFB(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(0, IdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddPatch(FlatBufferBuilder builder, StringOffset PatchOffset) { builder.AddOffset(2, PatchOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset TagsOffset) { builder.AddOffset(3, TagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProperties(FlatBufferBuilder builder, VectorOffset PropertiesOffset) { builder.AddOffset(4, PropertiesOffset.Value, 0); }
  public static VectorOffset CreatePropertiesVector(FlatBufferBuilder builder, Offset<EnumPropertyFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSlices(FlatBufferBuilder builder, VectorOffset SlicesOffset) { builder.AddOffset(5, SlicesOffset.Value, 0); }
  public static VectorOffset CreateSlicesVector(FlatBufferBuilder builder, Offset<EnumSliceFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSlicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EnumBoxFB> EndEnumBoxFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EnumBoxFB>(o);
  }
};


}
