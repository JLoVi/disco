// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Serialization.Raft
{

using System;
using FlatBuffers;

public sealed class RequestSnapshotResponseFB : Table {
  public static RequestSnapshotResponseFB GetRootAsRequestSnapshotResponseFB(ByteBuffer _bb) { return GetRootAsRequestSnapshotResponseFB(_bb, new RequestSnapshotResponseFB()); }
  public static RequestSnapshotResponseFB GetRootAsRequestSnapshotResponseFB(ByteBuffer _bb, RequestSnapshotResponseFB obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public RequestSnapshotResponseFB __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public ulong NodeId { get { int o = __offset(4); return o != 0 ? bb.GetUlong(o + bb_pos) : (ulong)0; } }
  public SnapshotResponseFB Response { get { return GetResponse(new SnapshotResponseFB()); } }
  public SnapshotResponseFB GetResponse(SnapshotResponseFB obj) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<RequestSnapshotResponseFB> CreateRequestSnapshotResponseFB(FlatBufferBuilder builder,
      ulong NodeId = 0,
      Offset<SnapshotResponseFB> ResponseOffset = default(Offset<SnapshotResponseFB>)) {
    builder.StartObject(2);
    RequestSnapshotResponseFB.AddNodeId(builder, NodeId);
    RequestSnapshotResponseFB.AddResponse(builder, ResponseOffset);
    return RequestSnapshotResponseFB.EndRequestSnapshotResponseFB(builder);
  }

  public static void StartRequestSnapshotResponseFB(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNodeId(FlatBufferBuilder builder, ulong NodeId) { builder.AddUlong(0, NodeId, 0); }
  public static void AddResponse(FlatBufferBuilder builder, Offset<SnapshotResponseFB> ResponseOffset) { builder.AddOffset(1, ResponseOffset.Value, 0); }
  public static Offset<RequestSnapshotResponseFB> EndRequestSnapshotResponseFB(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RequestSnapshotResponseFB>(o);
  }
};


}
