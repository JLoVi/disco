// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Types
{

using System;
using FlatBuffers;

public sealed class UByteSlice : Table {
  public static UByteSlice GetRootAsUByteSlice(ByteBuffer _bb) { return GetRootAsUByteSlice(_bb, new UByteSlice()); }
  public static UByteSlice GetRootAsUByteSlice(ByteBuffer _bb, UByteSlice obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public UByteSlice __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte Index { get { int o = __offset(4); return o != 0 ? bb.Get(o + bb_pos) : (byte)0; } }
  public byte Value { get { int o = __offset(6); return o != 0 ? bb.Get(o + bb_pos) : (byte)0; } }

  public static Offset<UByteSlice> CreateUByteSlice(FlatBufferBuilder builder,
      byte Index = 0,
      byte Value = 0) {
    builder.StartObject(2);
    UByteSlice.AddValue(builder, Value);
    UByteSlice.AddIndex(builder, Index);
    return UByteSlice.EndUByteSlice(builder);
  }

  public static void StartUByteSlice(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIndex(FlatBufferBuilder builder, byte Index) { builder.AddByte(0, Index, 0); }
  public static void AddValue(FlatBufferBuilder builder, byte Value) { builder.AddByte(1, Value, 0); }
  public static Offset<UByteSlice> EndUByteSlice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UByteSlice>(o);
  }
};


}
