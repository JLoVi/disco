// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Types
{

using System;
using FlatBuffers;

public sealed class IntSlice : Table {
  public static IntSlice GetRootAsIntSlice(ByteBuffer _bb) { return GetRootAsIntSlice(_bb, new IntSlice()); }
  public static IntSlice GetRootAsIntSlice(ByteBuffer _bb, IntSlice obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public IntSlice __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte Index { get { int o = __offset(4); return o != 0 ? bb.Get(o + bb_pos) : (byte)0; } }
  public int Value { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<IntSlice> CreateIntSlice(FlatBufferBuilder builder,
      byte Index = 0,
      int Value = 0) {
    builder.StartObject(2);
    IntSlice.AddValue(builder, Value);
    IntSlice.AddIndex(builder, Index);
    return IntSlice.EndIntSlice(builder);
  }

  public static void StartIntSlice(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIndex(FlatBufferBuilder builder, byte Index) { builder.AddByte(0, Index, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(1, Value, 0); }
  public static Offset<IntSlice> EndIntSlice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<IntSlice>(o);
  }
};


}
