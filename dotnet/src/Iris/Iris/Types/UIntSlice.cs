// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Types
{

using System;
using FlatBuffers;

public sealed class UIntSlice : Table {
  public static UIntSlice GetRootAsUIntSlice(ByteBuffer _bb) { return GetRootAsUIntSlice(_bb, new UIntSlice()); }
  public static UIntSlice GetRootAsUIntSlice(ByteBuffer _bb, UIntSlice obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public UIntSlice __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte Index { get { int o = __offset(4); return o != 0 ? bb.Get(o + bb_pos) : (byte)0; } }
  public uint Value { get { int o = __offset(6); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }

  public static Offset<UIntSlice> CreateUIntSlice(FlatBufferBuilder builder,
      byte Index = 0,
      uint Value = 0) {
    builder.StartObject(2);
    UIntSlice.AddValue(builder, Value);
    UIntSlice.AddIndex(builder, Index);
    return UIntSlice.EndUIntSlice(builder);
  }

  public static void StartUIntSlice(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIndex(FlatBufferBuilder builder, byte Index) { builder.AddByte(0, Index, 0); }
  public static void AddValue(FlatBufferBuilder builder, uint Value) { builder.AddUint(1, Value, 0); }
  public static Offset<UIntSlice> EndUIntSlice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UIntSlice>(o);
  }
};


}
