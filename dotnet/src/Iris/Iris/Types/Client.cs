// automatically generated by the FlatBuffers compiler, do not modify

namespace Iris.Types
{

using System;
using FlatBuffers;

public sealed class Client : Table {
  public static Client GetRootAsClient(ByteBuffer _bb) { return GetRootAsClient(_bb, new Client()); }
  public static Client GetRootAsClient(ByteBuffer _bb, Client obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Client __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Name { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(4); }

  public static Offset<Client> CreateClient(FlatBufferBuilder builder,
      StringOffset NameOffset = default(StringOffset)) {
    builder.StartObject(1);
    Client.AddName(builder, NameOffset);
    return Client.EndClient(builder);
  }

  public static void StartClient(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(0, NameOffset.Value, 0); }
  public static Offset<Client> EndClient(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Client>(o);
  }
  public static void FinishClientBuffer(FlatBufferBuilder builder, Offset<Client> offset) { builder.Finish(offset.Value); }
};


}
